/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SetFiscalDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetFiscalDataRequest{}

// SetFiscalDataRequest struct for SetFiscalDataRequest
type SetFiscalDataRequest struct {
	Id         string            `form:"id" json:"id"`
	Type       SetFiscalDataType `form:"type" json:"type"`
	FiscalData FiscalData        `form:"fiscal_data" json:"fiscal_data"`
}

type _SetFiscalDataRequest SetFiscalDataRequest

// NewSetFiscalDataRequest instantiates a new SetFiscalDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetFiscalDataRequest(id string, type_ SetFiscalDataType, fiscalData FiscalData) *SetFiscalDataRequest {
	this := SetFiscalDataRequest{}
	this.Id = id
	this.Type = type_
	this.FiscalData = fiscalData
	return &this
}

// NewSetFiscalDataRequestWithDefaults instantiates a new SetFiscalDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetFiscalDataRequestWithDefaults() *SetFiscalDataRequest {
	this := SetFiscalDataRequest{}
	return &this
}

// GetId returns the Id field value
func (o *SetFiscalDataRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SetFiscalDataRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SetFiscalDataRequest) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *SetFiscalDataRequest) GetType() SetFiscalDataType {
	if o == nil {
		var ret SetFiscalDataType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SetFiscalDataRequest) GetTypeOk() (*SetFiscalDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SetFiscalDataRequest) SetType(v SetFiscalDataType) {
	o.Type = v
}

// GetFiscalData returns the FiscalData field value
func (o *SetFiscalDataRequest) GetFiscalData() FiscalData {
	if o == nil {
		var ret FiscalData
		return ret
	}

	return o.FiscalData
}

// GetFiscalDataOk returns a tuple with the FiscalData field value
// and a boolean to check if the value has been set.
func (o *SetFiscalDataRequest) GetFiscalDataOk() (*FiscalData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiscalData, true
}

// SetFiscalData sets field value
func (o *SetFiscalDataRequest) SetFiscalData(v FiscalData) {
	o.FiscalData = v
}

func (o SetFiscalDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetFiscalDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["fiscal_data"] = o.FiscalData
	return toSerialize, nil
}

func (o *SetFiscalDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"fiscal_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetFiscalDataRequest := _SetFiscalDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetFiscalDataRequest)

	if err != nil {
		return err
	}

	*o = SetFiscalDataRequest(varSetFiscalDataRequest)

	return err
}

type NullableSetFiscalDataRequest struct {
	value *SetFiscalDataRequest
	isSet bool
}

func (v NullableSetFiscalDataRequest) Get() *SetFiscalDataRequest {
	return v.value
}

func (v *NullableSetFiscalDataRequest) Set(val *SetFiscalDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetFiscalDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetFiscalDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetFiscalDataRequest(val *SetFiscalDataRequest) *NullableSetFiscalDataRequest {
	return &NullableSetFiscalDataRequest{value: val, isSet: true}
}

func (v NullableSetFiscalDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetFiscalDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
