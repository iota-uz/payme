/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"fmt"
)

// SetFiscalDataType Type of fiscal operation
type SetFiscalDataType string

// List of SetFiscalDataType
const (
	SETFISCALDATATYPE_PERFORM SetFiscalDataType = "PERFORM"
	SETFISCALDATATYPE_CANCEL  SetFiscalDataType = "CANCEL"
)

// All allowed values of SetFiscalDataType enum
var AllowedSetFiscalDataTypeEnumValues = []SetFiscalDataType{
	"PERFORM",
	"CANCEL",
}

func (v *SetFiscalDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SetFiscalDataType(value)
	for _, existing := range AllowedSetFiscalDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SetFiscalDataType", value)
}

// NewSetFiscalDataTypeFromValue returns a pointer to a valid SetFiscalDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSetFiscalDataTypeFromValue(v string) (*SetFiscalDataType, error) {
	ev := SetFiscalDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SetFiscalDataType: valid values are %v", v, AllowedSetFiscalDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SetFiscalDataType) IsValid() bool {
	for _, existing := range AllowedSetFiscalDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SetFiscalDataType value
func (v SetFiscalDataType) Ptr() *SetFiscalDataType {
	return &v
}

type NullableSetFiscalDataType struct {
	value *SetFiscalDataType
	isSet bool
}

func (v NullableSetFiscalDataType) Get() *SetFiscalDataType {
	return v.value
}

func (v *NullableSetFiscalDataType) Set(val *SetFiscalDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableSetFiscalDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableSetFiscalDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetFiscalDataType(val *SetFiscalDataType) *NullableSetFiscalDataType {
	return &NullableSetFiscalDataType{value: val, isSet: true}
}

func (v NullableSetFiscalDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetFiscalDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
