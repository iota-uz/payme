/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionItem{}

// TransactionItem struct for TransactionItem
type TransactionItem struct {
	Discount    int32  `form:"discount" json:"discount"`
	Title       string `form:"title" json:"title"`
	Price       int32  `form:"price" json:"price"`
	Count       int32  `form:"count" json:"count"`
	Code        string `form:"code" json:"code"`
	Units       int32  `form:"units" json:"units"`
	VatPercent  int32  `form:"vat_percent" json:"vat_percent"`
	PackageCode string `form:"package_code" json:"package_code"`
}

type _TransactionItem TransactionItem

// NewTransactionItem instantiates a new TransactionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionItem(discount int32, title string, price int32, count int32, code string, units int32, vatPercent int32, packageCode string) *TransactionItem {
	this := TransactionItem{}
	this.Discount = discount
	this.Title = title
	this.Price = price
	this.Count = count
	this.Code = code
	this.Units = units
	this.VatPercent = vatPercent
	this.PackageCode = packageCode
	return &this
}

// NewTransactionItemWithDefaults instantiates a new TransactionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionItemWithDefaults() *TransactionItem {
	this := TransactionItem{}
	return &this
}

// GetDiscount returns the Discount field value
func (o *TransactionItem) GetDiscount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetDiscountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discount, true
}

// SetDiscount sets field value
func (o *TransactionItem) SetDiscount(v int32) {
	o.Discount = v
}

// GetTitle returns the Title field value
func (o *TransactionItem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TransactionItem) SetTitle(v string) {
	o.Title = v
}

// GetPrice returns the Price field value
func (o *TransactionItem) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *TransactionItem) SetPrice(v int32) {
	o.Price = v
}

// GetCount returns the Count field value
func (o *TransactionItem) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TransactionItem) SetCount(v int32) {
	o.Count = v
}

// GetCode returns the Code field value
func (o *TransactionItem) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TransactionItem) SetCode(v string) {
	o.Code = v
}

// GetUnits returns the Units field value
func (o *TransactionItem) GetUnits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetUnitsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *TransactionItem) SetUnits(v int32) {
	o.Units = v
}

// GetVatPercent returns the VatPercent field value
func (o *TransactionItem) GetVatPercent() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VatPercent
}

// GetVatPercentOk returns a tuple with the VatPercent field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetVatPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VatPercent, true
}

// SetVatPercent sets field value
func (o *TransactionItem) SetVatPercent(v int32) {
	o.VatPercent = v
}

// GetPackageCode returns the PackageCode field value
func (o *TransactionItem) GetPackageCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value
// and a boolean to check if the value has been set.
func (o *TransactionItem) GetPackageCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageCode, true
}

// SetPackageCode sets field value
func (o *TransactionItem) SetPackageCode(v string) {
	o.PackageCode = v
}

func (o TransactionItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["discount"] = o.Discount
	toSerialize["title"] = o.Title
	toSerialize["price"] = o.Price
	toSerialize["count"] = o.Count
	toSerialize["code"] = o.Code
	toSerialize["units"] = o.Units
	toSerialize["vat_percent"] = o.VatPercent
	toSerialize["package_code"] = o.PackageCode
	return toSerialize, nil
}

func (o *TransactionItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"discount",
		"title",
		"price",
		"count",
		"code",
		"units",
		"vat_percent",
		"package_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionItem := _TransactionItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionItem)

	if err != nil {
		return err
	}

	*o = TransactionItem(varTransactionItem)

	return err
}

type NullableTransactionItem struct {
	value *TransactionItem
	isSet bool
}

func (v NullableTransactionItem) Get() *TransactionItem {
	return v.value
}

func (v *NullableTransactionItem) Set(val *TransactionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionItem(val *TransactionItem) *NullableTransactionItem {
	return &NullableTransactionItem{value: val, isSet: true}
}

func (v NullableTransactionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
