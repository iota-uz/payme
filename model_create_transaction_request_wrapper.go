/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateTransactionRequestWrapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTransactionRequestWrapper{}

// CreateTransactionRequestWrapper struct for CreateTransactionRequestWrapper
type CreateTransactionRequestWrapper struct {
	Jsonrpc string                   `form:"jsonrpc" json:"jsonrpc"`
	Id      int64                    `form:"id" json:"id"`
	Method  string                   `form:"method" json:"method"`
	Params  CreateTransactionRequest `form:"params" json:"params"`
}

type _CreateTransactionRequestWrapper CreateTransactionRequestWrapper

// NewCreateTransactionRequestWrapper instantiates a new CreateTransactionRequestWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTransactionRequestWrapper(jsonrpc string, id int64, method string, params CreateTransactionRequest) *CreateTransactionRequestWrapper {
	this := CreateTransactionRequestWrapper{}
	this.Jsonrpc = jsonrpc
	this.Id = id
	this.Method = method
	this.Params = params
	return &this
}

// NewCreateTransactionRequestWrapperWithDefaults instantiates a new CreateTransactionRequestWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTransactionRequestWrapperWithDefaults() *CreateTransactionRequestWrapper {
	this := CreateTransactionRequestWrapper{}
	return &this
}

// GetJsonrpc returns the Jsonrpc field value
func (o *CreateTransactionRequestWrapper) GetJsonrpc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jsonrpc
}

// GetJsonrpcOk returns a tuple with the Jsonrpc field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequestWrapper) GetJsonrpcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jsonrpc, true
}

// SetJsonrpc sets field value
func (o *CreateTransactionRequestWrapper) SetJsonrpc(v string) {
	o.Jsonrpc = v
}

// GetId returns the Id field value
func (o *CreateTransactionRequestWrapper) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequestWrapper) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateTransactionRequestWrapper) SetId(v int64) {
	o.Id = v
}

// GetMethod returns the Method field value
func (o *CreateTransactionRequestWrapper) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequestWrapper) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *CreateTransactionRequestWrapper) SetMethod(v string) {
	o.Method = v
}

// GetParams returns the Params field value
func (o *CreateTransactionRequestWrapper) GetParams() CreateTransactionRequest {
	if o == nil {
		var ret CreateTransactionRequest
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequestWrapper) GetParamsOk() (*CreateTransactionRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *CreateTransactionRequestWrapper) SetParams(v CreateTransactionRequest) {
	o.Params = v
}

func (o CreateTransactionRequestWrapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTransactionRequestWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jsonrpc"] = o.Jsonrpc
	toSerialize["id"] = o.Id
	toSerialize["method"] = o.Method
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

func (o *CreateTransactionRequestWrapper) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jsonrpc",
		"id",
		"method",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTransactionRequestWrapper := _CreateTransactionRequestWrapper{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTransactionRequestWrapper)

	if err != nil {
		return err
	}

	*o = CreateTransactionRequestWrapper(varCreateTransactionRequestWrapper)

	return err
}

type NullableCreateTransactionRequestWrapper struct {
	value *CreateTransactionRequestWrapper
	isSet bool
}

func (v NullableCreateTransactionRequestWrapper) Get() *CreateTransactionRequestWrapper {
	return v.value
}

func (v *NullableCreateTransactionRequestWrapper) Set(val *CreateTransactionRequestWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransactionRequestWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransactionRequestWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransactionRequestWrapper(val *CreateTransactionRequestWrapper) *NullableCreateTransactionRequestWrapper {
	return &NullableCreateTransactionRequestWrapper{value: val, isSet: true}
}

func (v NullableCreateTransactionRequestWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransactionRequestWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
