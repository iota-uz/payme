/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckPerformTransactionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckPerformTransactionResponse{}

// CheckPerformTransactionResponse struct for CheckPerformTransactionResponse
type CheckPerformTransactionResponse struct {
	Allow bool `form:"allow" json:"allow"`
	Additional *map[string]string `form:"additional" json:"additional,omitempty"`
	Detail *TransactionDetail `form:"detail" json:"detail,omitempty"`
}

type _CheckPerformTransactionResponse CheckPerformTransactionResponse

// NewCheckPerformTransactionResponse instantiates a new CheckPerformTransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckPerformTransactionResponse(allow bool) *CheckPerformTransactionResponse {
	this := CheckPerformTransactionResponse{}
	this.Allow = allow
	return &this
}

// NewCheckPerformTransactionResponseWithDefaults instantiates a new CheckPerformTransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckPerformTransactionResponseWithDefaults() *CheckPerformTransactionResponse {
	this := CheckPerformTransactionResponse{}
	return &this
}

// GetAllow returns the Allow field value
func (o *CheckPerformTransactionResponse) GetAllow() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Allow
}

// GetAllowOk returns a tuple with the Allow field value
// and a boolean to check if the value has been set.
func (o *CheckPerformTransactionResponse) GetAllowOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allow, true
}

// SetAllow sets field value
func (o *CheckPerformTransactionResponse) SetAllow(v bool) {
	o.Allow = v
}

// GetAdditional returns the Additional field value if set, zero value otherwise.
func (o *CheckPerformTransactionResponse) GetAdditional() map[string]string {
	if o == nil || IsNil(o.Additional) {
		var ret map[string]string
		return ret
	}
	return *o.Additional
}

// GetAdditionalOk returns a tuple with the Additional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckPerformTransactionResponse) GetAdditionalOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Additional) {
		return nil, false
	}
	return o.Additional, true
}

// HasAdditional returns a boolean if a field has been set.
func (o *CheckPerformTransactionResponse) HasAdditional() bool {
	if o != nil && !IsNil(o.Additional) {
		return true
	}

	return false
}

// SetAdditional gets a reference to the given map[string]string and assigns it to the Additional field.
func (o *CheckPerformTransactionResponse) SetAdditional(v map[string]string) {
	o.Additional = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *CheckPerformTransactionResponse) GetDetail() TransactionDetail {
	if o == nil || IsNil(o.Detail) {
		var ret TransactionDetail
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckPerformTransactionResponse) GetDetailOk() (*TransactionDetail, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *CheckPerformTransactionResponse) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given TransactionDetail and assigns it to the Detail field.
func (o *CheckPerformTransactionResponse) SetDetail(v TransactionDetail) {
	o.Detail = &v
}

func (o CheckPerformTransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckPerformTransactionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allow"] = o.Allow
	if !IsNil(o.Additional) {
		toSerialize["additional"] = o.Additional
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

func (o *CheckPerformTransactionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckPerformTransactionResponse := _CheckPerformTransactionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckPerformTransactionResponse)

	if err != nil {
		return err
	}

	*o = CheckPerformTransactionResponse(varCheckPerformTransactionResponse)

	return err
}

type NullableCheckPerformTransactionResponse struct {
	value *CheckPerformTransactionResponse
	isSet bool
}

func (v NullableCheckPerformTransactionResponse) Get() *CheckPerformTransactionResponse {
	return v.value
}

func (v *NullableCheckPerformTransactionResponse) Set(val *CheckPerformTransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckPerformTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckPerformTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckPerformTransactionResponse(val *CheckPerformTransactionResponse) *NullableCheckPerformTransactionResponse {
	return &NullableCheckPerformTransactionResponse{value: val, isSet: true}
}

func (v NullableCheckPerformTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckPerformTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


