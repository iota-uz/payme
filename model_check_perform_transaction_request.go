/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckPerformTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckPerformTransactionRequest{}

// CheckPerformTransactionRequest struct for CheckPerformTransactionRequest
type CheckPerformTransactionRequest struct {
	Amount int32 `form:"amount" json:"amount"`
	Account map[string]interface{} `form:"account" json:"account"`
}

type _CheckPerformTransactionRequest CheckPerformTransactionRequest

// NewCheckPerformTransactionRequest instantiates a new CheckPerformTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckPerformTransactionRequest(amount int32, account map[string]interface{}) *CheckPerformTransactionRequest {
	this := CheckPerformTransactionRequest{}
	this.Amount = amount
	this.Account = account
	return &this
}

// NewCheckPerformTransactionRequestWithDefaults instantiates a new CheckPerformTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckPerformTransactionRequestWithDefaults() *CheckPerformTransactionRequest {
	this := CheckPerformTransactionRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CheckPerformTransactionRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CheckPerformTransactionRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CheckPerformTransactionRequest) SetAmount(v int32) {
	o.Amount = v
}

// GetAccount returns the Account field value
func (o *CheckPerformTransactionRequest) GetAccount() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *CheckPerformTransactionRequest) GetAccountOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Account, true
}

// SetAccount sets field value
func (o *CheckPerformTransactionRequest) SetAccount(v map[string]interface{}) {
	o.Account = v
}

func (o CheckPerformTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckPerformTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["account"] = o.Account
	return toSerialize, nil
}

func (o *CheckPerformTransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"account",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckPerformTransactionRequest := _CheckPerformTransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckPerformTransactionRequest)

	if err != nil {
		return err
	}

	*o = CheckPerformTransactionRequest(varCheckPerformTransactionRequest)

	return err
}

type NullableCheckPerformTransactionRequest struct {
	value *CheckPerformTransactionRequest
	isSet bool
}

func (v NullableCheckPerformTransactionRequest) Get() *CheckPerformTransactionRequest {
	return v.value
}

func (v *NullableCheckPerformTransactionRequest) Set(val *CheckPerformTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckPerformTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckPerformTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckPerformTransactionRequest(val *CheckPerformTransactionRequest) *NullableCheckPerformTransactionRequest {
	return &NullableCheckPerformTransactionRequest{value: val, isSet: true}
}

func (v NullableCheckPerformTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckPerformTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


