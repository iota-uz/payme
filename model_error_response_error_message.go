/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponseErrorMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseErrorMessage{}

// ErrorResponseErrorMessage struct for ErrorResponseErrorMessage
type ErrorResponseErrorMessage struct {
	Ru string `form:"ru" json:"ru"`
	Uz string `form:"uz" json:"uz"`
	En string `form:"en" json:"en"`
}

type _ErrorResponseErrorMessage ErrorResponseErrorMessage

// NewErrorResponseErrorMessage instantiates a new ErrorResponseErrorMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseErrorMessage(ru string, uz string, en string) *ErrorResponseErrorMessage {
	this := ErrorResponseErrorMessage{}
	this.Ru = ru
	this.Uz = uz
	this.En = en
	return &this
}

// NewErrorResponseErrorMessageWithDefaults instantiates a new ErrorResponseErrorMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseErrorMessageWithDefaults() *ErrorResponseErrorMessage {
	this := ErrorResponseErrorMessage{}
	return &this
}

// GetRu returns the Ru field value
func (o *ErrorResponseErrorMessage) GetRu() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ru
}

// GetRuOk returns a tuple with the Ru field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseErrorMessage) GetRuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ru, true
}

// SetRu sets field value
func (o *ErrorResponseErrorMessage) SetRu(v string) {
	o.Ru = v
}

// GetUz returns the Uz field value
func (o *ErrorResponseErrorMessage) GetUz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uz
}

// GetUzOk returns a tuple with the Uz field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseErrorMessage) GetUzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uz, true
}

// SetUz sets field value
func (o *ErrorResponseErrorMessage) SetUz(v string) {
	o.Uz = v
}

// GetEn returns the En field value
func (o *ErrorResponseErrorMessage) GetEn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.En
}

// GetEnOk returns a tuple with the En field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseErrorMessage) GetEnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.En, true
}

// SetEn sets field value
func (o *ErrorResponseErrorMessage) SetEn(v string) {
	o.En = v
}

func (o ErrorResponseErrorMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseErrorMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ru"] = o.Ru
	toSerialize["uz"] = o.Uz
	toSerialize["en"] = o.En
	return toSerialize, nil
}

func (o *ErrorResponseErrorMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ru",
		"uz",
		"en",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseErrorMessage := _ErrorResponseErrorMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponseErrorMessage)

	if err != nil {
		return err
	}

	*o = ErrorResponseErrorMessage(varErrorResponseErrorMessage)

	return err
}

type NullableErrorResponseErrorMessage struct {
	value *ErrorResponseErrorMessage
	isSet bool
}

func (v NullableErrorResponseErrorMessage) Get() *ErrorResponseErrorMessage {
	return v.value
}

func (v *NullableErrorResponseErrorMessage) Set(val *ErrorResponseErrorMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseErrorMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseErrorMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseErrorMessage(val *ErrorResponseErrorMessage) *NullableErrorResponseErrorMessage {
	return &NullableErrorResponseErrorMessage{value: val, isSet: true}
}

func (v NullableErrorResponseErrorMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseErrorMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


