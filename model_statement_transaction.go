/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StatementTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementTransaction{}

// StatementTransaction struct for StatementTransaction
type StatementTransaction struct {
	Id          string                 `form:"id" json:"id"`
	Time        int64                  `form:"time" json:"time"`
	Amount      float64                `form:"amount" json:"amount"`
	Account     map[string]interface{} `form:"account" json:"account"`
	CreateTime  int64                  `form:"create_time" json:"create_time"`
	PerformTime int64                  `form:"perform_time" json:"perform_time"`
	CancelTime  int64                  `form:"cancel_time" json:"cancel_time"`
	Transaction string                 `form:"transaction" json:"transaction"`
	State       int32                  `form:"state" json:"state"`
	Reason      NullableInt32          `form:"reason" json:"reason"`
	Receivers   []Receiver             `form:"receivers" json:"receivers,omitempty"`
}

type _StatementTransaction StatementTransaction

// NewStatementTransaction instantiates a new StatementTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementTransaction(id string, time int64, amount float64, account map[string]interface{}, createTime int64, performTime int64, cancelTime int64, transaction string, state int32, reason NullableInt32) *StatementTransaction {
	this := StatementTransaction{}
	this.Id = id
	this.Time = time
	this.Amount = amount
	this.Account = account
	this.CreateTime = createTime
	this.PerformTime = performTime
	this.CancelTime = cancelTime
	this.Transaction = transaction
	this.State = state
	this.Reason = reason
	return &this
}

// NewStatementTransactionWithDefaults instantiates a new StatementTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementTransactionWithDefaults() *StatementTransaction {
	this := StatementTransaction{}
	return &this
}

// GetId returns the Id field value
func (o *StatementTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StatementTransaction) SetId(v string) {
	o.Id = v
}

// GetTime returns the Time field value
func (o *StatementTransaction) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *StatementTransaction) SetTime(v int64) {
	o.Time = v
}

// GetAmount returns the Amount field value
func (o *StatementTransaction) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *StatementTransaction) SetAmount(v float64) {
	o.Amount = v
}

// GetAccount returns the Account field value
func (o *StatementTransaction) GetAccount() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetAccountOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Account, true
}

// SetAccount sets field value
func (o *StatementTransaction) SetAccount(v map[string]interface{}) {
	o.Account = v
}

// GetCreateTime returns the CreateTime field value
func (o *StatementTransaction) GetCreateTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetCreateTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateTime, true
}

// SetCreateTime sets field value
func (o *StatementTransaction) SetCreateTime(v int64) {
	o.CreateTime = v
}

// GetPerformTime returns the PerformTime field value
func (o *StatementTransaction) GetPerformTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PerformTime
}

// GetPerformTimeOk returns a tuple with the PerformTime field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetPerformTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerformTime, true
}

// SetPerformTime sets field value
func (o *StatementTransaction) SetPerformTime(v int64) {
	o.PerformTime = v
}

// GetCancelTime returns the CancelTime field value
func (o *StatementTransaction) GetCancelTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CancelTime
}

// GetCancelTimeOk returns a tuple with the CancelTime field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetCancelTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelTime, true
}

// SetCancelTime sets field value
func (o *StatementTransaction) SetCancelTime(v int64) {
	o.CancelTime = v
}

// GetTransaction returns the Transaction field value
func (o *StatementTransaction) GetTransaction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *StatementTransaction) SetTransaction(v string) {
	o.Transaction = v
}

// GetState returns the State field value
func (o *StatementTransaction) GetState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *StatementTransaction) SetState(v int32) {
	o.State = v
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *StatementTransaction) GetReason() int32 {
	if o == nil || o.Reason.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatementTransaction) GetReasonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// SetReason sets field value
func (o *StatementTransaction) SetReason(v int32) {
	o.Reason.Set(&v)
}

// GetReceivers returns the Receivers field value if set, zero value otherwise.
func (o *StatementTransaction) GetReceivers() []Receiver {
	if o == nil || IsNil(o.Receivers) {
		var ret []Receiver
		return ret
	}
	return o.Receivers
}

// GetReceiversOk returns a tuple with the Receivers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementTransaction) GetReceiversOk() ([]Receiver, bool) {
	if o == nil || IsNil(o.Receivers) {
		return nil, false
	}
	return o.Receivers, true
}

// HasReceivers returns a boolean if a field has been set.
func (o *StatementTransaction) HasReceivers() bool {
	if o != nil && !IsNil(o.Receivers) {
		return true
	}

	return false
}

// SetReceivers gets a reference to the given []Receiver and assigns it to the Receivers field.
func (o *StatementTransaction) SetReceivers(v []Receiver) {
	o.Receivers = v
}

func (o StatementTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["time"] = o.Time
	toSerialize["amount"] = o.Amount
	toSerialize["account"] = o.Account
	toSerialize["create_time"] = o.CreateTime
	toSerialize["perform_time"] = o.PerformTime
	toSerialize["cancel_time"] = o.CancelTime
	toSerialize["transaction"] = o.Transaction
	toSerialize["state"] = o.State
	toSerialize["reason"] = o.Reason.Get()
	if !IsNil(o.Receivers) {
		toSerialize["receivers"] = o.Receivers
	}
	return toSerialize, nil
}

func (o *StatementTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"time",
		"amount",
		"account",
		"create_time",
		"perform_time",
		"cancel_time",
		"transaction",
		"state",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatementTransaction := _StatementTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatementTransaction)

	if err != nil {
		return err
	}

	*o = StatementTransaction(varStatementTransaction)

	return err
}

type NullableStatementTransaction struct {
	value *StatementTransaction
	isSet bool
}

func (v NullableStatementTransaction) Get() *StatementTransaction {
	return v.value
}

func (v *NullableStatementTransaction) Set(val *StatementTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementTransaction(val *StatementTransaction) *NullableStatementTransaction {
	return &NullableStatementTransaction{value: val, isSet: true}
}

func (v NullableStatementTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
