/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CheckTransactionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckTransactionResponse{}

// CheckTransactionResponse struct for CheckTransactionResponse
type CheckTransactionResponse struct {
	CreateTime  int64  `form:"create_time" json:"create_time"`
	PerformTime int64  `form:"perform_time" json:"perform_time"`
	CancelTime  int64  `form:"cancel_time" json:"cancel_time"`
	Transaction string `form:"transaction" json:"transaction"`
	State       int32  `form:"state" json:"state"`
	Reason      *int32 `form:"reason" json:"reason"`
}

type _CheckTransactionResponse CheckTransactionResponse

// NewCheckTransactionResponse instantiates a new CheckTransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckTransactionResponse(createTime int64, performTime int64, cancelTime int64, transaction string, state int32) *CheckTransactionResponse {
	this := CheckTransactionResponse{}
	this.CreateTime = createTime
	this.PerformTime = performTime
	this.CancelTime = cancelTime
	this.Transaction = transaction
	this.State = state
	return &this
}

// NewCheckTransactionResponseWithDefaults instantiates a new CheckTransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckTransactionResponseWithDefaults() *CheckTransactionResponse {
	this := CheckTransactionResponse{}
	return &this
}

// GetCreateTime returns the CreateTime field value
func (o *CheckTransactionResponse) GetCreateTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value
// and a boolean to check if the value has been set.
func (o *CheckTransactionResponse) GetCreateTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateTime, true
}

// SetCreateTime sets field value
func (o *CheckTransactionResponse) SetCreateTime(v int64) {
	o.CreateTime = v
}

// GetPerformTime returns the PerformTime field value
func (o *CheckTransactionResponse) GetPerformTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PerformTime
}

// GetPerformTimeOk returns a tuple with the PerformTime field value
// and a boolean to check if the value has been set.
func (o *CheckTransactionResponse) GetPerformTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerformTime, true
}

// SetPerformTime sets field value
func (o *CheckTransactionResponse) SetPerformTime(v int64) {
	o.PerformTime = v
}

// GetCancelTime returns the CancelTime field value
func (o *CheckTransactionResponse) GetCancelTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CancelTime
}

// GetCancelTimeOk returns a tuple with the CancelTime field value
// and a boolean to check if the value has been set.
func (o *CheckTransactionResponse) GetCancelTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelTime, true
}

// SetCancelTime sets field value
func (o *CheckTransactionResponse) SetCancelTime(v int64) {
	o.CancelTime = v
}

// GetTransaction returns the Transaction field value
func (o *CheckTransactionResponse) GetTransaction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *CheckTransactionResponse) GetTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *CheckTransactionResponse) SetTransaction(v string) {
	o.Transaction = v
}

// GetState returns the State field value
func (o *CheckTransactionResponse) GetState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CheckTransactionResponse) GetStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CheckTransactionResponse) SetState(v int32) {
	o.State = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CheckTransactionResponse) GetReason() int32 {
	if o == nil || IsNil(o.Reason) {
		var ret int32
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckTransactionResponse) GetReasonOk() (*int32, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CheckTransactionResponse) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given int32 and assigns it to the Reason field.
func (o *CheckTransactionResponse) SetReason(v int32) {
	o.Reason = &v
}

func (o CheckTransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckTransactionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["create_time"] = o.CreateTime
	toSerialize["perform_time"] = o.PerformTime
	toSerialize["cancel_time"] = o.CancelTime
	toSerialize["transaction"] = o.Transaction
	toSerialize["state"] = o.State
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

func (o *CheckTransactionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"create_time",
		"perform_time",
		"cancel_time",
		"transaction",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckTransactionResponse := _CheckTransactionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckTransactionResponse)

	if err != nil {
		return err
	}

	*o = CheckTransactionResponse(varCheckTransactionResponse)

	return err
}

type NullableCheckTransactionResponse struct {
	value *CheckTransactionResponse
	isSet bool
}

func (v NullableCheckTransactionResponse) Get() *CheckTransactionResponse {
	return v.value
}

func (v *NullableCheckTransactionResponse) Set(val *CheckTransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckTransactionResponse(val *CheckTransactionResponse) *NullableCheckTransactionResponse {
	return &NullableCheckTransactionResponse{value: val, isSet: true}
}

func (v NullableCheckTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
