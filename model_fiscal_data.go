/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FiscalData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalData{}

// FiscalData struct for FiscalData
type FiscalData struct {
	ReceiptId  int32  `form:"receipt_id" json:"receipt_id"`
	StatusCode int32  `form:"status_code" json:"status_code"`
	Message    string `form:"message" json:"message"`
	TerminalId string `form:"terminal_id" json:"terminal_id"`
	FiscalSign string `form:"fiscal_sign" json:"fiscal_sign"`
	QrCodeUrl  string `form:"qr_code_url" json:"qr_code_url"`
	Date       string `form:"date" json:"date"`
}

type _FiscalData FiscalData

// NewFiscalData instantiates a new FiscalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalData(receiptId int32, statusCode int32, message string, terminalId string, fiscalSign string, qrCodeUrl string, date string) *FiscalData {
	this := FiscalData{}
	this.ReceiptId = receiptId
	this.StatusCode = statusCode
	this.Message = message
	this.TerminalId = terminalId
	this.FiscalSign = fiscalSign
	this.QrCodeUrl = qrCodeUrl
	this.Date = date
	return &this
}

// NewFiscalDataWithDefaults instantiates a new FiscalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalDataWithDefaults() *FiscalData {
	this := FiscalData{}
	return &this
}

// GetReceiptId returns the ReceiptId field value
func (o *FiscalData) GetReceiptId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReceiptId
}

// GetReceiptIdOk returns a tuple with the ReceiptId field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetReceiptIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceiptId, true
}

// SetReceiptId sets field value
func (o *FiscalData) SetReceiptId(v int32) {
	o.ReceiptId = v
}

// GetStatusCode returns the StatusCode field value
func (o *FiscalData) GetStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *FiscalData) SetStatusCode(v int32) {
	o.StatusCode = v
}

// GetMessage returns the Message field value
func (o *FiscalData) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *FiscalData) SetMessage(v string) {
	o.Message = v
}

// GetTerminalId returns the TerminalId field value
func (o *FiscalData) GetTerminalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TerminalId
}

// GetTerminalIdOk returns a tuple with the TerminalId field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetTerminalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminalId, true
}

// SetTerminalId sets field value
func (o *FiscalData) SetTerminalId(v string) {
	o.TerminalId = v
}

// GetFiscalSign returns the FiscalSign field value
func (o *FiscalData) GetFiscalSign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FiscalSign
}

// GetFiscalSignOk returns a tuple with the FiscalSign field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetFiscalSignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiscalSign, true
}

// SetFiscalSign sets field value
func (o *FiscalData) SetFiscalSign(v string) {
	o.FiscalSign = v
}

// GetQrCodeUrl returns the QrCodeUrl field value
func (o *FiscalData) GetQrCodeUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QrCodeUrl
}

// GetQrCodeUrlOk returns a tuple with the QrCodeUrl field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetQrCodeUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QrCodeUrl, true
}

// SetQrCodeUrl sets field value
func (o *FiscalData) SetQrCodeUrl(v string) {
	o.QrCodeUrl = v
}

// GetDate returns the Date field value
func (o *FiscalData) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *FiscalData) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *FiscalData) SetDate(v string) {
	o.Date = v
}

func (o FiscalData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["receipt_id"] = o.ReceiptId
	toSerialize["status_code"] = o.StatusCode
	toSerialize["message"] = o.Message
	toSerialize["terminal_id"] = o.TerminalId
	toSerialize["fiscal_sign"] = o.FiscalSign
	toSerialize["qr_code_url"] = o.QrCodeUrl
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

func (o *FiscalData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"receipt_id",
		"status_code",
		"message",
		"terminal_id",
		"fiscal_sign",
		"qr_code_url",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFiscalData := _FiscalData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFiscalData)

	if err != nil {
		return err
	}

	*o = FiscalData(varFiscalData)

	return err
}

type NullableFiscalData struct {
	value *FiscalData
	isSet bool
}

func (v NullableFiscalData) Get() *FiscalData {
	return v.value
}

func (v *NullableFiscalData) Set(val *FiscalData) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalData) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalData(val *FiscalData) *NullableFiscalData {
	return &NullableFiscalData{value: val, isSet: true}
}

func (v NullableFiscalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
