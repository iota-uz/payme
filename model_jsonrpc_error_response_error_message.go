/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
)

// checks if the JSONRPCErrorResponseErrorMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONRPCErrorResponseErrorMessage{}

// JSONRPCErrorResponseErrorMessage struct for JSONRPCErrorResponseErrorMessage
type JSONRPCErrorResponseErrorMessage struct {
	Ru *string `form:"ru" json:"ru,omitempty"`
	Uz *string `form:"uz" json:"uz,omitempty"`
	En *string `form:"en" json:"en,omitempty"`
}

// NewJSONRPCErrorResponseErrorMessage instantiates a new JSONRPCErrorResponseErrorMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONRPCErrorResponseErrorMessage() *JSONRPCErrorResponseErrorMessage {
	this := JSONRPCErrorResponseErrorMessage{}
	return &this
}

// NewJSONRPCErrorResponseErrorMessageWithDefaults instantiates a new JSONRPCErrorResponseErrorMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONRPCErrorResponseErrorMessageWithDefaults() *JSONRPCErrorResponseErrorMessage {
	this := JSONRPCErrorResponseErrorMessage{}
	return &this
}

// GetRu returns the Ru field value if set, zero value otherwise.
func (o *JSONRPCErrorResponseErrorMessage) GetRu() string {
	if o == nil || IsNil(o.Ru) {
		var ret string
		return ret
	}
	return *o.Ru
}

// GetRuOk returns a tuple with the Ru field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONRPCErrorResponseErrorMessage) GetRuOk() (*string, bool) {
	if o == nil || IsNil(o.Ru) {
		return nil, false
	}
	return o.Ru, true
}

// HasRu returns a boolean if a field has been set.
func (o *JSONRPCErrorResponseErrorMessage) HasRu() bool {
	if o != nil && !IsNil(o.Ru) {
		return true
	}

	return false
}

// SetRu gets a reference to the given string and assigns it to the Ru field.
func (o *JSONRPCErrorResponseErrorMessage) SetRu(v string) {
	o.Ru = &v
}

// GetUz returns the Uz field value if set, zero value otherwise.
func (o *JSONRPCErrorResponseErrorMessage) GetUz() string {
	if o == nil || IsNil(o.Uz) {
		var ret string
		return ret
	}
	return *o.Uz
}

// GetUzOk returns a tuple with the Uz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONRPCErrorResponseErrorMessage) GetUzOk() (*string, bool) {
	if o == nil || IsNil(o.Uz) {
		return nil, false
	}
	return o.Uz, true
}

// HasUz returns a boolean if a field has been set.
func (o *JSONRPCErrorResponseErrorMessage) HasUz() bool {
	if o != nil && !IsNil(o.Uz) {
		return true
	}

	return false
}

// SetUz gets a reference to the given string and assigns it to the Uz field.
func (o *JSONRPCErrorResponseErrorMessage) SetUz(v string) {
	o.Uz = &v
}

// GetEn returns the En field value if set, zero value otherwise.
func (o *JSONRPCErrorResponseErrorMessage) GetEn() string {
	if o == nil || IsNil(o.En) {
		var ret string
		return ret
	}
	return *o.En
}

// GetEnOk returns a tuple with the En field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONRPCErrorResponseErrorMessage) GetEnOk() (*string, bool) {
	if o == nil || IsNil(o.En) {
		return nil, false
	}
	return o.En, true
}

// HasEn returns a boolean if a field has been set.
func (o *JSONRPCErrorResponseErrorMessage) HasEn() bool {
	if o != nil && !IsNil(o.En) {
		return true
	}

	return false
}

// SetEn gets a reference to the given string and assigns it to the En field.
func (o *JSONRPCErrorResponseErrorMessage) SetEn(v string) {
	o.En = &v
}

func (o JSONRPCErrorResponseErrorMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONRPCErrorResponseErrorMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ru) {
		toSerialize["ru"] = o.Ru
	}
	if !IsNil(o.Uz) {
		toSerialize["uz"] = o.Uz
	}
	if !IsNil(o.En) {
		toSerialize["en"] = o.En
	}
	return toSerialize, nil
}

type NullableJSONRPCErrorResponseErrorMessage struct {
	value *JSONRPCErrorResponseErrorMessage
	isSet bool
}

func (v NullableJSONRPCErrorResponseErrorMessage) Get() *JSONRPCErrorResponseErrorMessage {
	return v.value
}

func (v *NullableJSONRPCErrorResponseErrorMessage) Set(val *JSONRPCErrorResponseErrorMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONRPCErrorResponseErrorMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONRPCErrorResponseErrorMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONRPCErrorResponseErrorMessage(val *JSONRPCErrorResponseErrorMessage) *NullableJSONRPCErrorResponseErrorMessage {
	return &NullableJSONRPCErrorResponseErrorMessage{value: val, isSet: true}
}

func (v NullableJSONRPCErrorResponseErrorMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONRPCErrorResponseErrorMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


