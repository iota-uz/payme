/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SetFiscalDataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetFiscalDataResponse{}

// SetFiscalDataResponse struct for SetFiscalDataResponse
type SetFiscalDataResponse struct {
	Success bool `form:"success" json:"success"`
}

type _SetFiscalDataResponse SetFiscalDataResponse

// NewSetFiscalDataResponse instantiates a new SetFiscalDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetFiscalDataResponse(success bool) *SetFiscalDataResponse {
	this := SetFiscalDataResponse{}
	this.Success = success
	return &this
}

// NewSetFiscalDataResponseWithDefaults instantiates a new SetFiscalDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetFiscalDataResponseWithDefaults() *SetFiscalDataResponse {
	this := SetFiscalDataResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *SetFiscalDataResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *SetFiscalDataResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *SetFiscalDataResponse) SetSuccess(v bool) {
	o.Success = v
}

func (o SetFiscalDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetFiscalDataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	return toSerialize, nil
}

func (o *SetFiscalDataResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetFiscalDataResponse := _SetFiscalDataResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetFiscalDataResponse)

	if err != nil {
		return err
	}

	*o = SetFiscalDataResponse(varSetFiscalDataResponse)

	return err
}

type NullableSetFiscalDataResponse struct {
	value *SetFiscalDataResponse
	isSet bool
}

func (v NullableSetFiscalDataResponse) Get() *SetFiscalDataResponse {
	return v.value
}

func (v *NullableSetFiscalDataResponse) Set(val *SetFiscalDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSetFiscalDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSetFiscalDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetFiscalDataResponse(val *SetFiscalDataResponse) *NullableSetFiscalDataResponse {
	return &NullableSetFiscalDataResponse{value: val, isSet: true}
}

func (v NullableSetFiscalDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetFiscalDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
