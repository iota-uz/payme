/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JSONRPCRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONRPCRequest{}

// JSONRPCRequest struct for JSONRPCRequest
type JSONRPCRequest struct {
	Jsonrpc *string `form:"jsonrpc" json:"jsonrpc,omitempty"`
	Method string `form:"method" json:"method"`
	Params JSONRPCRequestParams `form:"params" json:"params"`
	Id int64 `form:"id" json:"id"`
}

type _JSONRPCRequest JSONRPCRequest

// NewJSONRPCRequest instantiates a new JSONRPCRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONRPCRequest(method string, params JSONRPCRequestParams, id int64) *JSONRPCRequest {
	this := JSONRPCRequest{}
	this.Method = method
	this.Params = params
	this.Id = id
	return &this
}

// NewJSONRPCRequestWithDefaults instantiates a new JSONRPCRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONRPCRequestWithDefaults() *JSONRPCRequest {
	this := JSONRPCRequest{}
	return &this
}

// GetJsonrpc returns the Jsonrpc field value if set, zero value otherwise.
func (o *JSONRPCRequest) GetJsonrpc() string {
	if o == nil || IsNil(o.Jsonrpc) {
		var ret string
		return ret
	}
	return *o.Jsonrpc
}

// GetJsonrpcOk returns a tuple with the Jsonrpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONRPCRequest) GetJsonrpcOk() (*string, bool) {
	if o == nil || IsNil(o.Jsonrpc) {
		return nil, false
	}
	return o.Jsonrpc, true
}

// HasJsonrpc returns a boolean if a field has been set.
func (o *JSONRPCRequest) HasJsonrpc() bool {
	if o != nil && !IsNil(o.Jsonrpc) {
		return true
	}

	return false
}

// SetJsonrpc gets a reference to the given string and assigns it to the Jsonrpc field.
func (o *JSONRPCRequest) SetJsonrpc(v string) {
	o.Jsonrpc = &v
}

// GetMethod returns the Method field value
func (o *JSONRPCRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *JSONRPCRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *JSONRPCRequest) SetMethod(v string) {
	o.Method = v
}

// GetParams returns the Params field value
func (o *JSONRPCRequest) GetParams() JSONRPCRequestParams {
	if o == nil {
		var ret JSONRPCRequestParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *JSONRPCRequest) GetParamsOk() (*JSONRPCRequestParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *JSONRPCRequest) SetParams(v JSONRPCRequestParams) {
	o.Params = v
}

// GetId returns the Id field value
func (o *JSONRPCRequest) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JSONRPCRequest) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JSONRPCRequest) SetId(v int64) {
	o.Id = v
}

func (o JSONRPCRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONRPCRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jsonrpc) {
		toSerialize["jsonrpc"] = o.Jsonrpc
	}
	toSerialize["method"] = o.Method
	toSerialize["params"] = o.Params
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *JSONRPCRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
		"params",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSONRPCRequest := _JSONRPCRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJSONRPCRequest)

	if err != nil {
		return err
	}

	*o = JSONRPCRequest(varJSONRPCRequest)

	return err
}

type NullableJSONRPCRequest struct {
	value *JSONRPCRequest
	isSet bool
}

func (v NullableJSONRPCRequest) Get() *JSONRPCRequest {
	return v.value
}

func (v *NullableJSONRPCRequest) Set(val *JSONRPCRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONRPCRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONRPCRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONRPCRequest(val *JSONRPCRequest) *NullableJSONRPCRequest {
	return &NullableJSONRPCRequest{value: val, isSet: true}
}

func (v NullableJSONRPCRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONRPCRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


