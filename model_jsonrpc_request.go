/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"fmt"
)

// JSONRPCRequest - struct for JSONRPCRequest
type JSONRPCRequest struct {
	CancelTransactionRequestWrapper       *CancelTransactionRequestWrapper
	CheckPerformTransactionRequestWrapper *CheckPerformTransactionRequestWrapper
	CheckTransactionRequestWrapper        *CheckTransactionRequestWrapper
	CreateTransactionRequestWrapper       *CreateTransactionRequestWrapper
	GetStatementRequestWrapper            *GetStatementRequestWrapper
	PerformTransactionRequestWrapper      *PerformTransactionRequestWrapper
	SetFiscalDataRequestWrapper           *SetFiscalDataRequestWrapper
}

// CancelTransactionRequestWrapperAsJSONRPCRequest is a convenience function that returns CancelTransactionRequestWrapper wrapped in JSONRPCRequest
func CancelTransactionRequestWrapperAsJSONRPCRequest(v *CancelTransactionRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		CancelTransactionRequestWrapper: v,
	}
}

// CheckPerformTransactionRequestWrapperAsJSONRPCRequest is a convenience function that returns CheckPerformTransactionRequestWrapper wrapped in JSONRPCRequest
func CheckPerformTransactionRequestWrapperAsJSONRPCRequest(v *CheckPerformTransactionRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		CheckPerformTransactionRequestWrapper: v,
	}
}

// CheckTransactionRequestWrapperAsJSONRPCRequest is a convenience function that returns CheckTransactionRequestWrapper wrapped in JSONRPCRequest
func CheckTransactionRequestWrapperAsJSONRPCRequest(v *CheckTransactionRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		CheckTransactionRequestWrapper: v,
	}
}

// CreateTransactionRequestWrapperAsJSONRPCRequest is a convenience function that returns CreateTransactionRequestWrapper wrapped in JSONRPCRequest
func CreateTransactionRequestWrapperAsJSONRPCRequest(v *CreateTransactionRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		CreateTransactionRequestWrapper: v,
	}
}

// GetStatementRequestWrapperAsJSONRPCRequest is a convenience function that returns GetStatementRequestWrapper wrapped in JSONRPCRequest
func GetStatementRequestWrapperAsJSONRPCRequest(v *GetStatementRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		GetStatementRequestWrapper: v,
	}
}

// PerformTransactionRequestWrapperAsJSONRPCRequest is a convenience function that returns PerformTransactionRequestWrapper wrapped in JSONRPCRequest
func PerformTransactionRequestWrapperAsJSONRPCRequest(v *PerformTransactionRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		PerformTransactionRequestWrapper: v,
	}
}

// SetFiscalDataRequestWrapperAsJSONRPCRequest is a convenience function that returns SetFiscalDataRequestWrapper wrapped in JSONRPCRequest
func SetFiscalDataRequestWrapperAsJSONRPCRequest(v *SetFiscalDataRequestWrapper) JSONRPCRequest {
	return JSONRPCRequest{
		SetFiscalDataRequestWrapper: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *JSONRPCRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CancelTransaction'
	if jsonDict["method"] == "CancelTransaction" {
		// try to unmarshal JSON data into CancelTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CancelTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CancelTransactionRequestWrapper, return on the first match
		} else {
			dst.CancelTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CancelTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckPerformTransaction'
	if jsonDict["method"] == "CheckPerformTransaction" {
		// try to unmarshal JSON data into CheckPerformTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CheckPerformTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CheckPerformTransactionRequestWrapper, return on the first match
		} else {
			dst.CheckPerformTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CheckPerformTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckTransaction'
	if jsonDict["method"] == "CheckTransaction" {
		// try to unmarshal JSON data into CheckTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CheckTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CheckTransactionRequestWrapper, return on the first match
		} else {
			dst.CheckTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CheckTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateTransaction'
	if jsonDict["method"] == "CreateTransaction" {
		// try to unmarshal JSON data into CreateTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CreateTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CreateTransactionRequestWrapper, return on the first match
		} else {
			dst.CreateTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CreateTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GetStatement'
	if jsonDict["method"] == "GetStatement" {
		// try to unmarshal JSON data into GetStatementRequestWrapper
		err = json.Unmarshal(data, &dst.GetStatementRequestWrapper)
		if err == nil {
			return nil // data stored in dst.GetStatementRequestWrapper, return on the first match
		} else {
			dst.GetStatementRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as GetStatementRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PerformTransaction'
	if jsonDict["method"] == "PerformTransaction" {
		// try to unmarshal JSON data into PerformTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.PerformTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.PerformTransactionRequestWrapper, return on the first match
		} else {
			dst.PerformTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as PerformTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SetFiscalData'
	if jsonDict["method"] == "SetFiscalData" {
		// try to unmarshal JSON data into SetFiscalDataRequestWrapper
		err = json.Unmarshal(data, &dst.SetFiscalDataRequestWrapper)
		if err == nil {
			return nil // data stored in dst.SetFiscalDataRequestWrapper, return on the first match
		} else {
			dst.SetFiscalDataRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as SetFiscalDataRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CancelTransactionRequestWrapper'
	if jsonDict["method"] == "CancelTransactionRequestWrapper" {
		// try to unmarshal JSON data into CancelTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CancelTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CancelTransactionRequestWrapper, return on the first match
		} else {
			dst.CancelTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CancelTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckPerformTransactionRequestWrapper'
	if jsonDict["method"] == "CheckPerformTransactionRequestWrapper" {
		// try to unmarshal JSON data into CheckPerformTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CheckPerformTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CheckPerformTransactionRequestWrapper, return on the first match
		} else {
			dst.CheckPerformTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CheckPerformTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckTransactionRequestWrapper'
	if jsonDict["method"] == "CheckTransactionRequestWrapper" {
		// try to unmarshal JSON data into CheckTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CheckTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CheckTransactionRequestWrapper, return on the first match
		} else {
			dst.CheckTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CheckTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateTransactionRequestWrapper'
	if jsonDict["method"] == "CreateTransactionRequestWrapper" {
		// try to unmarshal JSON data into CreateTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.CreateTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.CreateTransactionRequestWrapper, return on the first match
		} else {
			dst.CreateTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as CreateTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GetStatementRequestWrapper'
	if jsonDict["method"] == "GetStatementRequestWrapper" {
		// try to unmarshal JSON data into GetStatementRequestWrapper
		err = json.Unmarshal(data, &dst.GetStatementRequestWrapper)
		if err == nil {
			return nil // data stored in dst.GetStatementRequestWrapper, return on the first match
		} else {
			dst.GetStatementRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as GetStatementRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PerformTransactionRequestWrapper'
	if jsonDict["method"] == "PerformTransactionRequestWrapper" {
		// try to unmarshal JSON data into PerformTransactionRequestWrapper
		err = json.Unmarshal(data, &dst.PerformTransactionRequestWrapper)
		if err == nil {
			return nil // data stored in dst.PerformTransactionRequestWrapper, return on the first match
		} else {
			dst.PerformTransactionRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as PerformTransactionRequestWrapper: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SetFiscalDataRequestWrapper'
	if jsonDict["method"] == "SetFiscalDataRequestWrapper" {
		// try to unmarshal JSON data into SetFiscalDataRequestWrapper
		err = json.Unmarshal(data, &dst.SetFiscalDataRequestWrapper)
		if err == nil {
			return nil // data stored in dst.SetFiscalDataRequestWrapper, return on the first match
		} else {
			dst.SetFiscalDataRequestWrapper = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequest as SetFiscalDataRequestWrapper: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JSONRPCRequest) MarshalJSON() ([]byte, error) {
	if src.CancelTransactionRequestWrapper != nil {
		return json.Marshal(&src.CancelTransactionRequestWrapper)
	}

	if src.CheckPerformTransactionRequestWrapper != nil {
		return json.Marshal(&src.CheckPerformTransactionRequestWrapper)
	}

	if src.CheckTransactionRequestWrapper != nil {
		return json.Marshal(&src.CheckTransactionRequestWrapper)
	}

	if src.CreateTransactionRequestWrapper != nil {
		return json.Marshal(&src.CreateTransactionRequestWrapper)
	}

	if src.GetStatementRequestWrapper != nil {
		return json.Marshal(&src.GetStatementRequestWrapper)
	}

	if src.PerformTransactionRequestWrapper != nil {
		return json.Marshal(&src.PerformTransactionRequestWrapper)
	}

	if src.SetFiscalDataRequestWrapper != nil {
		return json.Marshal(&src.SetFiscalDataRequestWrapper)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JSONRPCRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CancelTransactionRequestWrapper != nil {
		return obj.CancelTransactionRequestWrapper
	}

	if obj.CheckPerformTransactionRequestWrapper != nil {
		return obj.CheckPerformTransactionRequestWrapper
	}

	if obj.CheckTransactionRequestWrapper != nil {
		return obj.CheckTransactionRequestWrapper
	}

	if obj.CreateTransactionRequestWrapper != nil {
		return obj.CreateTransactionRequestWrapper
	}

	if obj.GetStatementRequestWrapper != nil {
		return obj.GetStatementRequestWrapper
	}

	if obj.PerformTransactionRequestWrapper != nil {
		return obj.PerformTransactionRequestWrapper
	}

	if obj.SetFiscalDataRequestWrapper != nil {
		return obj.SetFiscalDataRequestWrapper
	}

	// all schemas are nil
	return nil
}

type NullableJSONRPCRequest struct {
	value *JSONRPCRequest
	isSet bool
}

func (v NullableJSONRPCRequest) Get() *JSONRPCRequest {
	return v.value
}

func (v *NullableJSONRPCRequest) Set(val *JSONRPCRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONRPCRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONRPCRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONRPCRequest(val *JSONRPCRequest) *NullableJSONRPCRequest {
	return &NullableJSONRPCRequest{value: val, isSet: true}
}

func (v NullableJSONRPCRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONRPCRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
