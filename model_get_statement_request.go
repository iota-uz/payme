/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetStatementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetStatementRequest{}

// GetStatementRequest struct for GetStatementRequest
type GetStatementRequest struct {
	From int64 `form:"from" json:"from"`
	To   int64 `form:"to" json:"to"`
}

type _GetStatementRequest GetStatementRequest

// NewGetStatementRequest instantiates a new GetStatementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetStatementRequest(from int64, to int64) *GetStatementRequest {
	this := GetStatementRequest{}
	this.From = from
	this.To = to
	return &this
}

// NewGetStatementRequestWithDefaults instantiates a new GetStatementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetStatementRequestWithDefaults() *GetStatementRequest {
	this := GetStatementRequest{}
	return &this
}

// GetFrom returns the From field value
func (o *GetStatementRequest) GetFrom() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *GetStatementRequest) GetFromOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *GetStatementRequest) SetFrom(v int64) {
	o.From = v
}

// GetTo returns the To field value
func (o *GetStatementRequest) GetTo() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *GetStatementRequest) GetToOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *GetStatementRequest) SetTo(v int64) {
	o.To = v
}

func (o GetStatementRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetStatementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	return toSerialize, nil
}

func (o *GetStatementRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetStatementRequest := _GetStatementRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetStatementRequest)

	if err != nil {
		return err
	}

	*o = GetStatementRequest(varGetStatementRequest)

	return err
}

type NullableGetStatementRequest struct {
	value *GetStatementRequest
	isSet bool
}

func (v NullableGetStatementRequest) Get() *GetStatementRequest {
	return v.value
}

func (v *NullableGetStatementRequest) Set(val *GetStatementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStatementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStatementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStatementRequest(val *GetStatementRequest) *NullableGetStatementRequest {
	return &NullableGetStatementRequest{value: val, isSet: true}
}

func (v NullableGetStatementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStatementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
