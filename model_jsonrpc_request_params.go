/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"fmt"
)

// JSONRPCRequestParams - struct for JSONRPCRequestParams
type JSONRPCRequestParams struct {
	CancelTransactionRequest *CancelTransactionRequest
	CheckPerformTransactionRequest *CheckPerformTransactionRequest
	CheckTransactionRequest *CheckTransactionRequest
	CreateTransactionRequest *CreateTransactionRequest
	GetStatementRequest *GetStatementRequest
	PerformTransactionRequest *PerformTransactionRequest
	SetFiscalDataRequest *SetFiscalDataRequest
}

// CancelTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CancelTransactionRequest wrapped in JSONRPCRequestParams
func CancelTransactionRequestAsJSONRPCRequestParams(v *CancelTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CancelTransactionRequest: v,
	}
}

// CheckPerformTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CheckPerformTransactionRequest wrapped in JSONRPCRequestParams
func CheckPerformTransactionRequestAsJSONRPCRequestParams(v *CheckPerformTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CheckPerformTransactionRequest: v,
	}
}

// CheckTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CheckTransactionRequest wrapped in JSONRPCRequestParams
func CheckTransactionRequestAsJSONRPCRequestParams(v *CheckTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CheckTransactionRequest: v,
	}
}

// CreateTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CreateTransactionRequest wrapped in JSONRPCRequestParams
func CreateTransactionRequestAsJSONRPCRequestParams(v *CreateTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CreateTransactionRequest: v,
	}
}

// GetStatementRequestAsJSONRPCRequestParams is a convenience function that returns GetStatementRequest wrapped in JSONRPCRequestParams
func GetStatementRequestAsJSONRPCRequestParams(v *GetStatementRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		GetStatementRequest: v,
	}
}

// PerformTransactionRequestAsJSONRPCRequestParams is a convenience function that returns PerformTransactionRequest wrapped in JSONRPCRequestParams
func PerformTransactionRequestAsJSONRPCRequestParams(v *PerformTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		PerformTransactionRequest: v,
	}
}

// SetFiscalDataRequestAsJSONRPCRequestParams is a convenience function that returns SetFiscalDataRequest wrapped in JSONRPCRequestParams
func SetFiscalDataRequestAsJSONRPCRequestParams(v *SetFiscalDataRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		SetFiscalDataRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JSONRPCRequestParams) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CancelTransactionRequest
	err = json.Unmarshal(data, &dst.CancelTransactionRequest)
	if err == nil {
		jsonCancelTransactionRequest, _ := json.Marshal(dst.CancelTransactionRequest)
		if string(jsonCancelTransactionRequest) == "{}" { // empty struct
			dst.CancelTransactionRequest = nil
		} else {
			match++
		}
	} else {
		dst.CancelTransactionRequest = nil
	}

	// try to unmarshal data into CheckPerformTransactionRequest
	err = json.Unmarshal(data, &dst.CheckPerformTransactionRequest)
	if err == nil {
		jsonCheckPerformTransactionRequest, _ := json.Marshal(dst.CheckPerformTransactionRequest)
		if string(jsonCheckPerformTransactionRequest) == "{}" { // empty struct
			dst.CheckPerformTransactionRequest = nil
		} else {
			match++
		}
	} else {
		dst.CheckPerformTransactionRequest = nil
	}

	// try to unmarshal data into CheckTransactionRequest
	err = json.Unmarshal(data, &dst.CheckTransactionRequest)
	if err == nil {
		jsonCheckTransactionRequest, _ := json.Marshal(dst.CheckTransactionRequest)
		if string(jsonCheckTransactionRequest) == "{}" { // empty struct
			dst.CheckTransactionRequest = nil
		} else {
			match++
		}
	} else {
		dst.CheckTransactionRequest = nil
	}

	// try to unmarshal data into CreateTransactionRequest
	err = json.Unmarshal(data, &dst.CreateTransactionRequest)
	if err == nil {
		jsonCreateTransactionRequest, _ := json.Marshal(dst.CreateTransactionRequest)
		if string(jsonCreateTransactionRequest) == "{}" { // empty struct
			dst.CreateTransactionRequest = nil
		} else {
			match++
		}
	} else {
		dst.CreateTransactionRequest = nil
	}

	// try to unmarshal data into GetStatementRequest
	err = json.Unmarshal(data, &dst.GetStatementRequest)
	if err == nil {
		jsonGetStatementRequest, _ := json.Marshal(dst.GetStatementRequest)
		if string(jsonGetStatementRequest) == "{}" { // empty struct
			dst.GetStatementRequest = nil
		} else {
			match++
		}
	} else {
		dst.GetStatementRequest = nil
	}

	// try to unmarshal data into PerformTransactionRequest
	err = json.Unmarshal(data, &dst.PerformTransactionRequest)
	if err == nil {
		jsonPerformTransactionRequest, _ := json.Marshal(dst.PerformTransactionRequest)
		if string(jsonPerformTransactionRequest) == "{}" { // empty struct
			dst.PerformTransactionRequest = nil
		} else {
			match++
		}
	} else {
		dst.PerformTransactionRequest = nil
	}

	// try to unmarshal data into SetFiscalDataRequest
	err = json.Unmarshal(data, &dst.SetFiscalDataRequest)
	if err == nil {
		jsonSetFiscalDataRequest, _ := json.Marshal(dst.SetFiscalDataRequest)
		if string(jsonSetFiscalDataRequest) == "{}" { // empty struct
			dst.SetFiscalDataRequest = nil
		} else {
			match++
		}
	} else {
		dst.SetFiscalDataRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CancelTransactionRequest = nil
		dst.CheckPerformTransactionRequest = nil
		dst.CheckTransactionRequest = nil
		dst.CreateTransactionRequest = nil
		dst.GetStatementRequest = nil
		dst.PerformTransactionRequest = nil
		dst.SetFiscalDataRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JSONRPCRequestParams)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JSONRPCRequestParams)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JSONRPCRequestParams) MarshalJSON() ([]byte, error) {
	if src.CancelTransactionRequest != nil {
		return json.Marshal(&src.CancelTransactionRequest)
	}

	if src.CheckPerformTransactionRequest != nil {
		return json.Marshal(&src.CheckPerformTransactionRequest)
	}

	if src.CheckTransactionRequest != nil {
		return json.Marshal(&src.CheckTransactionRequest)
	}

	if src.CreateTransactionRequest != nil {
		return json.Marshal(&src.CreateTransactionRequest)
	}

	if src.GetStatementRequest != nil {
		return json.Marshal(&src.GetStatementRequest)
	}

	if src.PerformTransactionRequest != nil {
		return json.Marshal(&src.PerformTransactionRequest)
	}

	if src.SetFiscalDataRequest != nil {
		return json.Marshal(&src.SetFiscalDataRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JSONRPCRequestParams) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CancelTransactionRequest != nil {
		return obj.CancelTransactionRequest
	}

	if obj.CheckPerformTransactionRequest != nil {
		return obj.CheckPerformTransactionRequest
	}

	if obj.CheckTransactionRequest != nil {
		return obj.CheckTransactionRequest
	}

	if obj.CreateTransactionRequest != nil {
		return obj.CreateTransactionRequest
	}

	if obj.GetStatementRequest != nil {
		return obj.GetStatementRequest
	}

	if obj.PerformTransactionRequest != nil {
		return obj.PerformTransactionRequest
	}

	if obj.SetFiscalDataRequest != nil {
		return obj.SetFiscalDataRequest
	}

	// all schemas are nil
	return nil
}

type NullableJSONRPCRequestParams struct {
	value *JSONRPCRequestParams
	isSet bool
}

func (v NullableJSONRPCRequestParams) Get() *JSONRPCRequestParams {
	return v.value
}

func (v *NullableJSONRPCRequestParams) Set(val *JSONRPCRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONRPCRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONRPCRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONRPCRequestParams(val *JSONRPCRequestParams) *NullableJSONRPCRequestParams {
	return &NullableJSONRPCRequestParams{value: val, isSet: true}
}

func (v NullableJSONRPCRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONRPCRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


