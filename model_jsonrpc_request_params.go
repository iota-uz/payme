/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"fmt"
)

// JSONRPCRequestParams - struct for JSONRPCRequestParams
type JSONRPCRequestParams struct {
	CancelTransactionRequest       *CancelTransactionRequest
	CheckPerformTransactionRequest *CheckPerformTransactionRequest
	CheckTransactionRequest        *CheckTransactionRequest
	CreateTransactionRequest       *CreateTransactionRequest
	GetStatementRequest            *GetStatementRequest
	PerformTransactionRequest      *PerformTransactionRequest
	SetFiscalDataRequest           *SetFiscalDataRequest
}

// CancelTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CancelTransactionRequest wrapped in JSONRPCRequestParams
func CancelTransactionRequestAsJSONRPCRequestParams(v *CancelTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CancelTransactionRequest: v,
	}
}

// CheckPerformTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CheckPerformTransactionRequest wrapped in JSONRPCRequestParams
func CheckPerformTransactionRequestAsJSONRPCRequestParams(v *CheckPerformTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CheckPerformTransactionRequest: v,
	}
}

// CheckTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CheckTransactionRequest wrapped in JSONRPCRequestParams
func CheckTransactionRequestAsJSONRPCRequestParams(v *CheckTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CheckTransactionRequest: v,
	}
}

// CreateTransactionRequestAsJSONRPCRequestParams is a convenience function that returns CreateTransactionRequest wrapped in JSONRPCRequestParams
func CreateTransactionRequestAsJSONRPCRequestParams(v *CreateTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		CreateTransactionRequest: v,
	}
}

// GetStatementRequestAsJSONRPCRequestParams is a convenience function that returns GetStatementRequest wrapped in JSONRPCRequestParams
func GetStatementRequestAsJSONRPCRequestParams(v *GetStatementRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		GetStatementRequest: v,
	}
}

// PerformTransactionRequestAsJSONRPCRequestParams is a convenience function that returns PerformTransactionRequest wrapped in JSONRPCRequestParams
func PerformTransactionRequestAsJSONRPCRequestParams(v *PerformTransactionRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		PerformTransactionRequest: v,
	}
}

// SetFiscalDataRequestAsJSONRPCRequestParams is a convenience function that returns SetFiscalDataRequest wrapped in JSONRPCRequestParams
func SetFiscalDataRequestAsJSONRPCRequestParams(v *SetFiscalDataRequest) JSONRPCRequestParams {
	return JSONRPCRequestParams{
		SetFiscalDataRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *JSONRPCRequestParams) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CancelTransaction'
	if jsonDict["method"] == "CancelTransaction" {
		// try to unmarshal JSON data into CancelTransactionRequest
		err = json.Unmarshal(data, &dst.CancelTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CancelTransactionRequest, return on the first match
		} else {
			dst.CancelTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CancelTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckPerformTransaction'
	if jsonDict["method"] == "CheckPerformTransaction" {
		// try to unmarshal JSON data into CheckPerformTransactionRequest
		err = json.Unmarshal(data, &dst.CheckPerformTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CheckPerformTransactionRequest, return on the first match
		} else {
			dst.CheckPerformTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CheckPerformTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckTransaction'
	if jsonDict["method"] == "CheckTransaction" {
		// try to unmarshal JSON data into CheckTransactionRequest
		err = json.Unmarshal(data, &dst.CheckTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CheckTransactionRequest, return on the first match
		} else {
			dst.CheckTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CheckTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateTransaction'
	if jsonDict["method"] == "CreateTransaction" {
		// try to unmarshal JSON data into CreateTransactionRequest
		err = json.Unmarshal(data, &dst.CreateTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CreateTransactionRequest, return on the first match
		} else {
			dst.CreateTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CreateTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GetStatement'
	if jsonDict["method"] == "GetStatement" {
		// try to unmarshal JSON data into GetStatementRequest
		err = json.Unmarshal(data, &dst.GetStatementRequest)
		if err == nil {
			return nil // data stored in dst.GetStatementRequest, return on the first match
		} else {
			dst.GetStatementRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as GetStatementRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PerformTransaction'
	if jsonDict["method"] == "PerformTransaction" {
		// try to unmarshal JSON data into PerformTransactionRequest
		err = json.Unmarshal(data, &dst.PerformTransactionRequest)
		if err == nil {
			return nil // data stored in dst.PerformTransactionRequest, return on the first match
		} else {
			dst.PerformTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as PerformTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SetFiscalData'
	if jsonDict["method"] == "SetFiscalData" {
		// try to unmarshal JSON data into SetFiscalDataRequest
		err = json.Unmarshal(data, &dst.SetFiscalDataRequest)
		if err == nil {
			return nil // data stored in dst.SetFiscalDataRequest, return on the first match
		} else {
			dst.SetFiscalDataRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as SetFiscalDataRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CancelTransactionRequest'
	if jsonDict["method"] == "CancelTransactionRequest" {
		// try to unmarshal JSON data into CancelTransactionRequest
		err = json.Unmarshal(data, &dst.CancelTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CancelTransactionRequest, return on the first match
		} else {
			dst.CancelTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CancelTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckPerformTransactionRequest'
	if jsonDict["method"] == "CheckPerformTransactionRequest" {
		// try to unmarshal JSON data into CheckPerformTransactionRequest
		err = json.Unmarshal(data, &dst.CheckPerformTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CheckPerformTransactionRequest, return on the first match
		} else {
			dst.CheckPerformTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CheckPerformTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckTransactionRequest'
	if jsonDict["method"] == "CheckTransactionRequest" {
		// try to unmarshal JSON data into CheckTransactionRequest
		err = json.Unmarshal(data, &dst.CheckTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CheckTransactionRequest, return on the first match
		} else {
			dst.CheckTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CheckTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateTransactionRequest'
	if jsonDict["method"] == "CreateTransactionRequest" {
		// try to unmarshal JSON data into CreateTransactionRequest
		err = json.Unmarshal(data, &dst.CreateTransactionRequest)
		if err == nil {
			return nil // data stored in dst.CreateTransactionRequest, return on the first match
		} else {
			dst.CreateTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as CreateTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GetStatementRequest'
	if jsonDict["method"] == "GetStatementRequest" {
		// try to unmarshal JSON data into GetStatementRequest
		err = json.Unmarshal(data, &dst.GetStatementRequest)
		if err == nil {
			return nil // data stored in dst.GetStatementRequest, return on the first match
		} else {
			dst.GetStatementRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as GetStatementRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PerformTransactionRequest'
	if jsonDict["method"] == "PerformTransactionRequest" {
		// try to unmarshal JSON data into PerformTransactionRequest
		err = json.Unmarshal(data, &dst.PerformTransactionRequest)
		if err == nil {
			return nil // data stored in dst.PerformTransactionRequest, return on the first match
		} else {
			dst.PerformTransactionRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as PerformTransactionRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SetFiscalDataRequest'
	if jsonDict["method"] == "SetFiscalDataRequest" {
		// try to unmarshal JSON data into SetFiscalDataRequest
		err = json.Unmarshal(data, &dst.SetFiscalDataRequest)
		if err == nil {
			return nil // data stored in dst.SetFiscalDataRequest, return on the first match
		} else {
			dst.SetFiscalDataRequest = nil
			return fmt.Errorf("failed to unmarshal JSONRPCRequestParams as SetFiscalDataRequest: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JSONRPCRequestParams) MarshalJSON() ([]byte, error) {
	if src.CancelTransactionRequest != nil {
		return json.Marshal(&src.CancelTransactionRequest)
	}

	if src.CheckPerformTransactionRequest != nil {
		return json.Marshal(&src.CheckPerformTransactionRequest)
	}

	if src.CheckTransactionRequest != nil {
		return json.Marshal(&src.CheckTransactionRequest)
	}

	if src.CreateTransactionRequest != nil {
		return json.Marshal(&src.CreateTransactionRequest)
	}

	if src.GetStatementRequest != nil {
		return json.Marshal(&src.GetStatementRequest)
	}

	if src.PerformTransactionRequest != nil {
		return json.Marshal(&src.PerformTransactionRequest)
	}

	if src.SetFiscalDataRequest != nil {
		return json.Marshal(&src.SetFiscalDataRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JSONRPCRequestParams) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CancelTransactionRequest != nil {
		return obj.CancelTransactionRequest
	}

	if obj.CheckPerformTransactionRequest != nil {
		return obj.CheckPerformTransactionRequest
	}

	if obj.CheckTransactionRequest != nil {
		return obj.CheckTransactionRequest
	}

	if obj.CreateTransactionRequest != nil {
		return obj.CreateTransactionRequest
	}

	if obj.GetStatementRequest != nil {
		return obj.GetStatementRequest
	}

	if obj.PerformTransactionRequest != nil {
		return obj.PerformTransactionRequest
	}

	if obj.SetFiscalDataRequest != nil {
		return obj.SetFiscalDataRequest
	}

	// all schemas are nil
	return nil
}

type NullableJSONRPCRequestParams struct {
	value *JSONRPCRequestParams
	isSet bool
}

func (v NullableJSONRPCRequestParams) Get() *JSONRPCRequestParams {
	return v.value
}

func (v *NullableJSONRPCRequestParams) Set(val *JSONRPCRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONRPCRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONRPCRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONRPCRequestParams(val *JSONRPCRequestParams) *NullableJSONRPCRequestParams {
	return &NullableJSONRPCRequestParams{value: val, isSet: true}
}

func (v NullableJSONRPCRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONRPCRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
