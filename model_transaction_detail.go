/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionDetail{}

// TransactionDetail struct for TransactionDetail
type TransactionDetail struct {
	ReceiptType int32 `form:"receipt_type" json:"receipt_type"`
	Shipping *TransactionDetailShipping `form:"shipping" json:"shipping,omitempty"`
	Items []TransactionItem `form:"items" json:"items"`
}

type _TransactionDetail TransactionDetail

// NewTransactionDetail instantiates a new TransactionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionDetail(receiptType int32, items []TransactionItem) *TransactionDetail {
	this := TransactionDetail{}
	this.ReceiptType = receiptType
	this.Items = items
	return &this
}

// NewTransactionDetailWithDefaults instantiates a new TransactionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDetailWithDefaults() *TransactionDetail {
	this := TransactionDetail{}
	return &this
}

// GetReceiptType returns the ReceiptType field value
func (o *TransactionDetail) GetReceiptType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReceiptType
}

// GetReceiptTypeOk returns a tuple with the ReceiptType field value
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetReceiptTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceiptType, true
}

// SetReceiptType sets field value
func (o *TransactionDetail) SetReceiptType(v int32) {
	o.ReceiptType = v
}

// GetShipping returns the Shipping field value if set, zero value otherwise.
func (o *TransactionDetail) GetShipping() TransactionDetailShipping {
	if o == nil || IsNil(o.Shipping) {
		var ret TransactionDetailShipping
		return ret
	}
	return *o.Shipping
}

// GetShippingOk returns a tuple with the Shipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetShippingOk() (*TransactionDetailShipping, bool) {
	if o == nil || IsNil(o.Shipping) {
		return nil, false
	}
	return o.Shipping, true
}

// HasShipping returns a boolean if a field has been set.
func (o *TransactionDetail) HasShipping() bool {
	if o != nil && !IsNil(o.Shipping) {
		return true
	}

	return false
}

// SetShipping gets a reference to the given TransactionDetailShipping and assigns it to the Shipping field.
func (o *TransactionDetail) SetShipping(v TransactionDetailShipping) {
	o.Shipping = &v
}

// GetItems returns the Items field value
func (o *TransactionDetail) GetItems() []TransactionItem {
	if o == nil {
		var ret []TransactionItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *TransactionDetail) GetItemsOk() ([]TransactionItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *TransactionDetail) SetItems(v []TransactionItem) {
	o.Items = v
}

func (o TransactionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["receipt_type"] = o.ReceiptType
	if !IsNil(o.Shipping) {
		toSerialize["shipping"] = o.Shipping
	}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *TransactionDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"receipt_type",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionDetail := _TransactionDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionDetail)

	if err != nil {
		return err
	}

	*o = TransactionDetail(varTransactionDetail)

	return err
}

type NullableTransactionDetail struct {
	value *TransactionDetail
	isSet bool
}

func (v NullableTransactionDetail) Get() *TransactionDetail {
	return v.value
}

func (v *NullableTransactionDetail) Set(val *TransactionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDetail(val *TransactionDetail) *NullableTransactionDetail {
	return &NullableTransactionDetail{value: val, isSet: true}
}

func (v NullableTransactionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


