/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancelTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelTransactionRequest{}

// CancelTransactionRequest struct for CancelTransactionRequest
type CancelTransactionRequest struct {
	Id string `form:"id" json:"id"`
	Reason int32 `form:"reason" json:"reason"`
}

type _CancelTransactionRequest CancelTransactionRequest

// NewCancelTransactionRequest instantiates a new CancelTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelTransactionRequest(id string, reason int32) *CancelTransactionRequest {
	this := CancelTransactionRequest{}
	this.Id = id
	this.Reason = reason
	return &this
}

// NewCancelTransactionRequestWithDefaults instantiates a new CancelTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelTransactionRequestWithDefaults() *CancelTransactionRequest {
	this := CancelTransactionRequest{}
	return &this
}

// GetId returns the Id field value
func (o *CancelTransactionRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CancelTransactionRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CancelTransactionRequest) SetId(v string) {
	o.Id = v
}

// GetReason returns the Reason field value
func (o *CancelTransactionRequest) GetReason() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CancelTransactionRequest) GetReasonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CancelTransactionRequest) SetReason(v int32) {
	o.Reason = v
}

func (o CancelTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *CancelTransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelTransactionRequest := _CancelTransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelTransactionRequest)

	if err != nil {
		return err
	}

	*o = CancelTransactionRequest(varCancelTransactionRequest)

	return err
}

type NullableCancelTransactionRequest struct {
	value *CancelTransactionRequest
	isSet bool
}

func (v NullableCancelTransactionRequest) Get() *CancelTransactionRequest {
	return v.value
}

func (v *NullableCancelTransactionRequest) Set(val *CancelTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelTransactionRequest(val *CancelTransactionRequest) *NullableCancelTransactionRequest {
	return &NullableCancelTransactionRequest{value: val, isSet: true}
}

func (v NullableCancelTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


