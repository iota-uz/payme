/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the JSONRPCSuccessResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONRPCSuccessResponse{}

// JSONRPCSuccessResponse struct for JSONRPCSuccessResponse
type JSONRPCSuccessResponse struct {
	Result JSONRPCSuccessResponseResult `form:"result" json:"result"`
	Id     int64                        `form:"id" json:"id"`
}

type _JSONRPCSuccessResponse JSONRPCSuccessResponse

// NewJSONRPCSuccessResponse instantiates a new JSONRPCSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONRPCSuccessResponse(result JSONRPCSuccessResponseResult, id int64) *JSONRPCSuccessResponse {
	this := JSONRPCSuccessResponse{}
	this.Result = result
	this.Id = id
	return &this
}

// NewJSONRPCSuccessResponseWithDefaults instantiates a new JSONRPCSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONRPCSuccessResponseWithDefaults() *JSONRPCSuccessResponse {
	this := JSONRPCSuccessResponse{}
	return &this
}

// GetResult returns the Result field value
func (o *JSONRPCSuccessResponse) GetResult() JSONRPCSuccessResponseResult {
	if o == nil {
		var ret JSONRPCSuccessResponseResult
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *JSONRPCSuccessResponse) GetResultOk() (*JSONRPCSuccessResponseResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *JSONRPCSuccessResponse) SetResult(v JSONRPCSuccessResponseResult) {
	o.Result = v
}

// GetId returns the Id field value
func (o *JSONRPCSuccessResponse) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JSONRPCSuccessResponse) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JSONRPCSuccessResponse) SetId(v int64) {
	o.Id = v
}

func (o JSONRPCSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONRPCSuccessResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *JSONRPCSuccessResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSONRPCSuccessResponse := _JSONRPCSuccessResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJSONRPCSuccessResponse)

	if err != nil {
		return err
	}

	*o = JSONRPCSuccessResponse(varJSONRPCSuccessResponse)

	return err
}

type NullableJSONRPCSuccessResponse struct {
	value *JSONRPCSuccessResponse
	isSet bool
}

func (v NullableJSONRPCSuccessResponse) Get() *JSONRPCSuccessResponse {
	return v.value
}

func (v *NullableJSONRPCSuccessResponse) Set(val *JSONRPCSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONRPCSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONRPCSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONRPCSuccessResponse(val *JSONRPCSuccessResponse) *NullableJSONRPCSuccessResponse {
	return &NullableJSONRPCSuccessResponse{value: val, isSet: true}
}

func (v NullableJSONRPCSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONRPCSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
