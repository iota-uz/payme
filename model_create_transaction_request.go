/*
Payme Merchant API

API for managing Payme Merchant.

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTransactionRequest{}

// CreateTransactionRequest struct for CreateTransactionRequest
type CreateTransactionRequest struct {
	Id string `form:"id" json:"id"`
	Time int64 `form:"time" json:"time"`
	Amount int32 `form:"amount" json:"amount"`
	Account Account `form:"account" json:"account"`
}

type _CreateTransactionRequest CreateTransactionRequest

// NewCreateTransactionRequest instantiates a new CreateTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTransactionRequest(id string, time int64, amount int32, account Account) *CreateTransactionRequest {
	this := CreateTransactionRequest{}
	this.Id = id
	this.Time = time
	this.Amount = amount
	this.Account = account
	return &this
}

// NewCreateTransactionRequestWithDefaults instantiates a new CreateTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTransactionRequestWithDefaults() *CreateTransactionRequest {
	this := CreateTransactionRequest{}
	return &this
}

// GetId returns the Id field value
func (o *CreateTransactionRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateTransactionRequest) SetId(v string) {
	o.Id = v
}

// GetTime returns the Time field value
func (o *CreateTransactionRequest) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequest) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *CreateTransactionRequest) SetTime(v int64) {
	o.Time = v
}

// GetAmount returns the Amount field value
func (o *CreateTransactionRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreateTransactionRequest) SetAmount(v int32) {
	o.Amount = v
}

// GetAccount returns the Account field value
func (o *CreateTransactionRequest) GetAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *CreateTransactionRequest) GetAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *CreateTransactionRequest) SetAccount(v Account) {
	o.Account = v
}

func (o CreateTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["time"] = o.Time
	toSerialize["amount"] = o.Amount
	toSerialize["account"] = o.Account
	return toSerialize, nil
}

func (o *CreateTransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"time",
		"amount",
		"account",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTransactionRequest := _CreateTransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTransactionRequest)

	if err != nil {
		return err
	}

	*o = CreateTransactionRequest(varCreateTransactionRequest)

	return err
}

type NullableCreateTransactionRequest struct {
	value *CreateTransactionRequest
	isSet bool
}

func (v NullableCreateTransactionRequest) Get() *CreateTransactionRequest {
	return v.value
}

func (v *NullableCreateTransactionRequest) Set(val *CreateTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransactionRequest(val *CreateTransactionRequest) *NullableCreateTransactionRequest {
	return &NullableCreateTransactionRequest{value: val, isSet: true}
}

func (v NullableCreateTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


